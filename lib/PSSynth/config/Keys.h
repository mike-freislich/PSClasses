#pragma once

#pragma region MODULES
// -- Voice A Modules ---
#define MOD_PWM_A "MOD_PWM_A"
#define MOD_LFO1a "MOD_LFO1a"
#define MOD_LFO2a "MOD_LFO2a"
#define MOD_PENV "MOD_PENV"
#define MOD_AENV "MOD_AENV"
#define MOD_FENV "MOD_FENV"
#define MOD_VCFa "MOD_VCFa"
#define MOD_VCOa "MOD_VCOa"
#define MOD_VCAa "MOD_VCAa"
#define MOD_NOISEa "MOD_NOISEa"
#define MOD_RINGMODa "MOD_RINGMODa"
#define MOD_FOLDa "MOD_FOLDa"


// -- Voice B Modules ---
#define MOD_PWM_B "MOD_PWM_B"
#define MOD_LFO1b "MOD_LFO1b"
#define MOD_LFO2b "MOD_LFO2b"
#define MOD_VCFb "MOD_VCFb"
#define MOD_VCOb "MOD_VCOb"
#define MOD_VCAb "MOD_VCAb"
#define MOD_NOISEb "MOD_NOISEb"
#define MOD_RINGMODb "MOD_RINGMODb"
#define MOD_FOLDb "MOD_FOLDb"

// -- Mixers --
#define MOD_MIXER_MAIN "MOD_MIXER_MAIN"

#pragma endregion

#pragma region PARAMETERS
// -- Attack Envelopes A / B --
#define PARM_AENV_ATTACK "PARM_AENV_ATTACK"
#define PARM_AENV_HOLD "PARM_AENV_HOLD"
#define PARM_AENV_DECAY "PARM_AENV_DECAY"
#define PARM_AENV_SUSTAIN "PARM_AENV_SUSTAIN"
#define PARM_AENV_RELEASE "PARM_AENV_RELEASE"
#define PARM_AENV_AMOUNT "PARM_AENV_AMOUNT"
#define PARM_AENV_INVERT "PARM_AENV_INVERT"
// -- Pitch Envelopes A / B --
#define PARM_PENV_ATTACK "PARM_PENV_ATTACK"
#define PARM_PENV_HOLD "PARM_PENV_HOLD"
#define PARM_PENV_DECAY "PARM_PENV_DECAY"
#define PARM_PENV_SUSTAIN "PARM_PENV_SUSTAIN"
#define PARM_PENV_RELEASE "PARM_PENV_RELEASE"
#define PARM_PENV_AMOUNT "PARM_PENV_AMOUNT"
#define PARM_PENV_INVERT "PARM_AENV_INVERT"
// -- Filter Envelopes A / B --
#define PARM_FENV_ATTACK "PARM_FENV_ATTACK"
#define PARM_FENV_HOLD "PARM_FENV_HOLD"
#define PARM_FENV_DECAY "PARM_FENV_DECAY"
#define PARM_FENV_SUSTAIN "PARM_FENV_SUSTAIN"
#define PARM_FENV_RELEASE "PARM_FENV_RELEASE"
#define PARM_FENV_AMOUNT "PARM_FENV_AMOUNT"
#define PARM_FENV_INVERT "PARM_FENV_INVERT"

// LFO
#define PARM_PLFO_SHAPE "PARM_PLFO_SHAPE"
#define PARM_PLFO_FREQ "PARM_PLFO_FREQ"
#define PARM_PLFO_AMOUNT "PARM_PLFO_AMOUNT"
#define PARM_ALFO_SHAPE "PARM_ALFO_SHAPE"
#define PARM_ALFO_FREQ "PARM_ALFO_FREQ"
#define PARM_ALFO_AMOUNT "PARM_ALFO_AMOUNT"
#define PARM_FLFO_SHAPE "PARM_FLFO_SHAPE"
#define PARM_FLFO_FREQ "PARM_FLFO_FREQ"
#define PARM_FLFO_AMOUNT "PARM_FLFO_AMOUNT"
#define PARM_PITCH_BEND "PARM_PITCH_BEND"
#define PARM_AMP_BEND "PARM_AMP_BEND"
#define PARM_FILTER_BEND "PARM_FILTER_BEND"

// PWM
#define PARM_PWM_A_SHAPE "PARM_PWM_A_SHAPE"
#define PARM_PWM_A_FREQ "PARM_PWM_A_FREQ"
#define PARM_PWM_A_GAIN "PARM_PWM_A_GAIN"
#define PARM_PWM_B_SHAPE "PARM_PWM_B_SHAPE"
#define PARM_PWM_B_FREQ "PARM_PWM_B_FREQ"
#define PARM_PWM_B_GAIN "PARM_PWM_B_GAIN"

// Ring Modulation
#define PARM_RING_LEVEL "PARM_RING_LEVEL"
#define PARM_RING_FREQ "PARM_RING_FREQ"
#define PARM_RING_WAVE "PARM_RING_WAVE"

// Output Mixer
#define PARM_VOICE_GAIN0 "PARM_VOICE_GAIN0"
#define PARM_VOICE_GAIN1 "PARM_VOICE_GAIN1"
#define PARM_VOICE_GAIN2 "PARM_VOICE_GAIN2"
#define PARM_VOICE_GAIN3 "PARM_VOICE_GAIN3"
#define PARM_VOICE_PAN0 "PARM_VOICE_PAN0"
#define PARM_VOICE_PAN1 "PARM_VOICE_PAN1"
#define PARM_VOICE_PAN2 "PARM_VOICE_PAN2"
#define PARM_VOICE_PAN3 "PARM_VOICE_PAN3"
#define PARM_MASTER_GAIN "PARM_MASTER_GAIN"
#define PARM_MASTER_PAN "PARM_MASTER_PAN"

#pragma endregion

#pragma region CONTROLLERS
// ---------------------- CONTROLLERS ----------------------
#define CTRL_POT1 "CTRL_POT1"
#define CTRL_POT2 "CTRL_POT2"
#define CTRL_POT3 "CTRL_POT3"
#define CTRL_POT4 "CTRL_POT4"
#define CTRL_POT5 "CTRL_POT5"
#define CTRL_POT6 "CTRL_POT6"
#define CTRL_POT_DataA "CTRL_POT_DataA"
#define CTRL_POT_DataB "CTRL_POT_DataB"
#define CTRL_POT_DataC "CTRL_POT_DataC"
#define CTRL_POT_DataD "CTRL_POT_DataD"
#define CTRL_ROTARY_DataG_pA "CTRL_ROTARY_DataG_pA"
#define CTRL_ROTARY_DataG_pB "CTRL_ROTARY_DataG_pB"
#define CTRL_BTN_DataG "CTRL_BTN_DataG"
#define CTRL_BTN_Shift "CTRL_BTN_Shift"
#define CTRL_BTN_VoiceSelect "CTRL_BTN_VoiceSelect"
#define CTRL_BTN_Invert "CTRL_BTN_Invert"

#pragma endregion

#pragma region SCENES
// ---------------------- SCENES ----------------------
#define SCN_ENVELOPE "SCN_ENVELOPE"
#define SCN_VOICEMIXER "SCN_VOICEMIXER"

#pragma endregion

// struct Range
// {
//     Range(float min, float max) : min(min), max(max) {}
//     float min;
//     float max;
// };
